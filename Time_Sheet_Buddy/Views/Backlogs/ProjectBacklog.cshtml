@using Microsoft.AspNetCore.Mvc.Rendering;
@using Time_Sheet_Buddy.Models;

@model List<Time_Sheet_Buddy.Entities.Issue>

@{
    ViewData["Title"] = "Index";
}

@{
    var users = ViewData["Users"] as List<ApplicationUser>;
    var lastChoice = ViewData["LastChoice"] as String;
    var currUser = ViewData["CurrentUser"] as String;
    var currentProject = ViewData["CurrentProject"] as String;
}

<style>
    main {
        padding: 0rem 5%;
        height: 100%;
        background: linear-gradient( 145deg, #ffd89b 0%, #19547b 100%) no-repeat fixed;
    }

    .container {
        width: 100%;
        max-width: 100%;
    }

    .issue {
        transition: transform .2s; /* Animation */
    }

        .issue:hover {
            transform: scale(1.1); /* (150% zoom - Note: if the zoom is too large, it will go outside of the viewport) */
        }

    .container body-content {
        width: 80%;
    }

    .board-container {
        display: flex;
        flex-direction: row;
        height: 100%;
        flex-direction: column;
    }

    .pb-3 {
        height: 100%;
        width: 100%;
    }

    .issues-block {
        display: flex;
        flex-direction: row;
        width: 100%;
    }

    .issue-container {
        height: 100%;
        margin: 0 auto;
        width: 100%;
        display: flex;
        justify-content: flex-start;
        align-items: center;
        flex-direction: column;
        padding: 1px;
    }

    #issues {
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: row;
    }

    .issue-duration {
        text-align: center;
    }

    .issue-container h2 {
        margin: .5rem;
    }

    .issues-list {
        height: 100%;
        width: 100%;
        background-color: #ffffff;
        border-radius: .25rem;
        list-style: none;
        margin: 0;
        padding: .5rem 0;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .issue {
        width: 100%;
        margin: .5rem;
        border: 1px solid black;
        border-radius: .25rem;
        display: flex;
        flex-direction: column;
    }

    .issue-title {
        align-self: center;
        margin: .5rem 0;
        color: #436C81;
        word-wrap: break-word;
        display: inline-block;
        overflow: hidden;
        width: 100%;
        text-align: center;
        font-size: larger;
        font-weight: bold;
    }

    .issue-description {
        align-self: center;
        margin: .1rem 0;
        color: darkgray;
        word-wrap: break-word;
        display: inline-block;
        overflow: hidden;
        width: 100%;
        text-align: center;
        font-style: italic;
    }

    #deletion-tray {
        margin: .2rem;
        width: 100%;
        background-image: url('../../wwwroot/images/trash.png');
        background-color: #ffeded;
        background-repeat: no-repeat;
        background-size: 5rem;
        background-position: center;
        opacity: 0.8;
        border-radius: .25rem;
        overflow-y: unset;
    }

    .issue.dragging {
        opacity: .5;
    }

    .add-btn-img {
        margin: 0 auto;
        width: 2rem;
        height: 2rem;
        display: flex;
        justify-self: flex-start;
    }

    .delete-img {
        margin: 0 auto;
        width: 2rem;
        height: 2rem;
        display: flex;
        justify-self: flex-start;
    }


    @@media only screen and (max-width: 1024px) {
        main {
            font-size: small;
            padding: .5rem 2%;
            max-width: 99vw;
        }

        .issues-block {
            flex-direction: column;
        }

        .issues-list {
            overflow-y: scroll;
        }

        .issue-duration {
            text-align: center;
        }

        .issue-container {
            width: 100%;
            min-height: 40vh;
            max-height: 50vh;
        }
    }

    @@media (min-width: 1200px) .container {
        width: 100%;

        .issue-duration {
            text-align: center;
        }

        .issues-list {
            overflow-y: scroll;
        }
    }

    @@media only screen and (max-width: 768px) {
        main {
            font-size: small;
            padding: .5rem 2%;
            max-width: 99vw;
        }

        #issues {
            flex-direction: column;
        }

        .issues-list {
            overflow-y: scroll;
        }

        .issue-duration {
            text-align: center;
        }

        .issues-block {
            flex-direction: column;
            width: 100%;
        }

        .issue-container {
            flex-direction: column;
            width: 100%;
            min-height: 40vh;
            max-height: 50vh;
        }
    }


    body {
        font-family: Arial, Helvetica, sans-serif;
    }

    /* The Modal (background) */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    /* The Modal (background) */
    .modalProj {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    /* Modal Content */
    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

    /* Modal Content */
    .modal-contentProj {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

    /* The Close Button */
    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    /* The Close Button */
    .closeProj {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover,
    .close:focus {
        color: #000;
        text-decoration: none;
        cursor: pointer;
    }

    .closeProj:hover,
    ..closeProj:focus {
        color: #000;
        text-decoration: none;
        cursor: pointer;
    }
</style>
<h2></h2>

    <html>
    <head>

    </head>
    <body>
        <div class="root">
            <header class="main-header">
                <h1 id="header">Backlog @currentProject</h1>
            </header>

            <select id="id_filter_list" name="id_filter_list">
                <option>Show All</option>
                @foreach (var user in users)
                {
                    if (lastChoice != null && lastChoice.Split(' ')[0].ToString() == user.UserName.ToString())
                    {
                        if (currUser != null && currUser.ToString() == user.Id.ToString())
                        {
                            <option selected>@user.UserName (<i>Me</i>)</option>
                        }
                        else
                        {
                            <option selected>@user.UserName</option>
                        }
                    }
                    else
                    {
                        if (currUser != null && currUser.ToString() == user.Id.ToString())
                        {
                            <option>@user.UserName (<i>Me</i>)</option>
                        }
                        else
                        {
                            <option>@user.UserName</option>
                        }
                    }
                }
            </select>
            <input onclick="filterTriggered()" type="submit" value="Filter" />

            <main>
                <!-- The Modal -->
                <div id="myModal" class="modal">

                    <!-- Modal content -->
                    <div class="modal-content">
                        <span class="close">&times;</span>
                        <select id="selectAssignedTo">
                            @foreach (var user in users)
                            {
                                <option>@user.UserName</option>
                            }
                        </select>
                        <button id="saveAssignedTo">Save</button>
                    </div>

                </div>

                <!-- The Modal -->
                <div id="myModalProj" class="modalProj">

                    <!-- Modal content -->
                    <div class="modal-contentProj">
                        <span class="closeProj">&times;</span>
                        <select id="selectProj">
                            @foreach (var user in Model)
                            {
                                <option>@user.Project</option>
                            }
                        </select>
                        <button id="saveProj">Save</button>
                    </div>

                </div>

                <div class="board-container">
                    <div id="issues">
                        <div class="issues-block">
                            <div class="issue-container">

                                <h2>Open</h2>
                                <ul class="issues-list" id="open">
                                    <li id="add-issue">
                                        <img class="add-btn-img" src="~/images/addButton.png" alt="Add issue" />
                                    </li>
                                </ul>
                            </div>
                            <div class="issue-container">
                                <h2>In Progress</h2>
                                <ul class="issues-list" id="in-progress">
                                </ul>
                            </div>
                        </div>
                        <div class="issues-block">
                            <div class="issue-container">
                                <h2>Resolved</h2>
                                <ul class="issues-list" id="resolved">
                                </ul>
                            </div>
                            <div class="issue-container">
                                <h2>Closed</h2>
                                <ul class="issues-list" id="closed">
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="issues-list" id="deletion-tray">
                        <img class="delete-img" src="~/images/trash.png" alt="Add issue" />
                    </div>
                </div>
            </main>
        </div>
    </body>
</html>

<script type="text/javascript">
    let draggables = document.querySelectorAll('.issue')
    let containers = document.querySelectorAll('.issues-list')
    let deletionTray = document.getElementById('deletion-tray')
    let issuesContainer = document.getElementById('issues')
    let createButton = document.getElementById('add-issue')

    deletionTray.style.visibility = 'hidden'
    deletionTray.style.height = '0'

    createButton.addEventListener('click', e => {
        //let newIssue = createIssue("Issue Title", "Issue Description")
        //createButton.insertAdjacentElement("afterend", newIssue);

        var headerProj = document.getElementById("header");
        var headerProjName = headerProj.innerText;

        var projectName = headerProjName.substr(8, headerProjName.length).trim();

        //console.log(projectName);
        //console.log("Toyota");

        window.location = "@(Url.Action("CreateNewTask", "Backlogs"))" + "?projectName=" + projectName;
    })

        draggables.forEach(draggable => {
        //console.log("draggables.forEach - line 206");

        draggable.addEventListener('dragstart', () => {
            draggable.classList.add('dragging')
            deletionTray.style.visibility = 'visible'
            deletionTray.style.height = '30%'
            issuesContainer.style.height = '70%'
        })

        draggable.addEventListener('dragend', () => {
            draggable.classList.remove('dragging')
            deletionTray.style.visibility = 'hidden'
            deletionTray.style.height = '0'
            issuesContainer.style.height = '100%'
        })
    })

    containers.forEach(container => {
        container.addEventListener('dragover', e => {
            e.preventDefault()
            const afterElement = getDragAfterElement(container, e.clientY)

            const draggable = document.querySelector('.dragging')
            if (afterElement == null) {
                container.appendChild(draggable)
            } else {
                container.insertBefore(draggable, afterElement)
            }
        })
    })

    deletionTray.addEventListener('dragend', e => {

        //console.log("deletionTray.addEventListener line 240");
        e.preventDefault();
        deletionTray.lastChild.remove()
    })

        function filterTriggered() {

            var select = document.getElementById('id_filter_list');
            var value = select.options[select.selectedIndex].value + "";

            console.log(value);

            var headerProj = document.getElementById("header");
            var headerProjName = headerProj.innerText;

            console.log(headerProjName);

            var projectName = headerProjName.substr(8, headerProjName.length).trim();

            console.log(projectName);

            //console.log(projectName);
            //console.log("Toyota");

            //window.location = "Backlogs"
            window.location = "@(Url.Action("ProjectBacklog", "Backlogs"))" + "?proj=" + projectName + "&selectedFilter=" + value;


    }

    function getDragAfterElement(container, y) {
        const draggableElements = [...container.querySelectorAll('.issue:not(.dragging)')]

        return draggableElements.reduce((closest, child) => {
            const box = child.getBoundingClientRect()
            const offset = y - box.top - box.height / 2
            if (offset < 0 && offset > closest.offset) {
                return { offset: offset, element: child }
            } else {
            return closest
        }
        }, { offset: Number.NEGATIVE_INFINITY }).element
    }

    function issueDoubleClick(el) {
        //console.log("Hello from the issue clicked!!! " + el);

        var elInt = parseInt(el);

        window.location = "@(Url.Action("Details", "Issues"))" + "?Id=" + elInt;

        @*console.log(elInt);
        var xhr = new XMLHttpRequest();

        xhr.open('GET', '/IssueTrackers/Edit', true);
        xhr.send(elInt);*@
    }

    function assignedToClick(assignedToValue) {
        // Get the modal
        var modal = document.getElementById("myModal");

        // Get Save Button
        var button = document.getElementById("saveAssignedTo");

        // Get the button that opens the modal
        var btn = document.getElementById(assignedToValue.toString().trim());
        console.log(assignedToValue.trim());
        console.log(assignedToValue);
        console.log(btn);
        // Get the <span> element that closes the modal
        var span = document.getElementsByClassName("close")[0];

        // When the user clicks the button, open the modal
        btn.onclick = function () {
            modal.style.display = "block";
        }

        // When the user clicks on <span> (x), close the modal
        span.onclick = function () {
            modal.style.display = "none";
        }

        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }

        button.addEventListener('click', () => {
            var select = document.getElementById('selectAssignedTo');
            var value = select.options[select.selectedIndex].value;
            console.log(value); // en
            modal.style.display = "none";
            btn.innerText = "Assigned To: " +  value;

            assignedToChange(assignedToValue, value, "assignedTo");
        })
    }

    function assignedToChange(assignedToValue, value, valueType) {
        console.log(assignedToValue);

        var issueId = "";
        if (valueType == "assignedTo")
            issueId = assignedToValue.substr(11, assignedToValue.length);
        else if (valueType == "project")
            issueId = assignedToValue.substr(10, assignedToValue.length);
        console.log(issueId)
        console.log(value);

        var request = new XMLHttpRequest();
        //debugger;
        var o = new Object();
        o.propVal_id = issueId;
        o.propVal_new_value = value;
        if (valueType == "assignedTo")
            o.propVal_Type = "AssigendTo";
        else if (valueType == "project")
            o.propVal_Type = "Project";

        //console.log(o.issue_id);
        //console.log(o.newState);
        //console.log(JSON.stringify(o));

        request.open('POST', '/Issues/IndexChange', true);
        request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
        request.setRequestHeader('Content-Length', JSON.stringify(o).length);
        request.onreadystatechange = function () {
        if (request.readyState == 4 && request.status == 200) {
                //console.log(request.responseText)
            }
        }
        request.send(JSON.stringify(o));

    }

    function projClick(projId) {
        // Get the modal
        var modalProj = document.getElementById("myModalProj");

        // Get Save Button
        var buttonProj = document.getElementById("saveProj");

        // Get the button that opens the modal
        var btnProj = document.getElementById(projId.toString().trim());
        console.log(projId.trim());
        console.log(projId);
        console.log(btnProj);
        // Get the <span> element that closes the modal
        var spanProj = document.getElementsByClassName("closeProj")[0];

        // When the user clicks the button, open the modal
        btnProj.onclick = function () {
            modalProj.style.display = "block";
        }

        // When the user clicks on <span> (x), close the modal
        spanProj.onclick = function () {
            modalProj.style.display = "none";
        }

        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function (event) {
            if (event.target == modalProj) {
                modalProj.style.display = "none";
            }
        }

        buttonProj.addEventListener('click', () => {
            var selectProj = document.getElementById('selectProj');
            var valueProj = selectProj.options[selectProj.selectedIndex].value;
            console.log(valueProj); // en
            modalProj.style.display = "none";
            btnProj.innerText = "Project: " + valueProj;

            assignedToChange(projId, valueProj, "project");
        })
    }

    function createIssue(id, titleMessage, asigneeMessage, durationMessage, assignieMessage) {
        let newIssue = document.createElement("li");
        newIssue.classList.add('issue');
        newIssue.setAttribute("id", id);
        newIssue.setAttribute('draggable', 'true');

        newIssue.addEventListener('dragstart', () => {
            //console.log("newIssue.addEventListener dragstart - line 306")
            newIssue.classList.add('dragging')
            deletionTray.style.visibility = 'visible'
            deletionTray.style.height = '30%'
        })

        newIssue.addEventListener('dragend', () => {
            window.addEventListener("wheel", event => {

                console.info("Hello");
            });
            //console.log("newIssue.addEventListener draged - line 306")
            newIssue.classList.remove('dragging')
            //console.log("id of the issue is " + newIssue.id);
            deletionTray.style.visibility = 'hidden'
            deletionTray.style.height = '0'
            //console.log(document.getElementById(newIssue.id).parentNode.id);

            var innerText = document.getElementById(newIssue.id).children[1];
            //debugger;
            var state = document.getElementById(newIssue.id).parentNode.id;
            console.log(state);
            console.log(state == "closed");
            if (state == "closed") {
                innerText.innerText = "0";
            }

            var request = new XMLHttpRequest();
            //debugger;
            var o = new Object();
            o.issue_id = newIssue.id;
            o.issue_new_state = document.getElementById(newIssue.id).parentNode.id;

            //console.log(o.issue_id);
            //console.log(o.newState);
            //console.log(JSON.stringify(o));

            request.open('POST', '/Issues/IndexPost', true);
            request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
            request.setRequestHeader('Content-Length', JSON.stringify(o).length);
            request.onreadystatechange = function () {
                if (request.readyState == 4 && request.status == 200) {
                    //console.log(request.responseText)
                }
            }
            request.send(JSON.stringify(o));
        })

        let title = document.createElement('p')

        if (titleMessage == 'undefined' || titleMessage == "" || titleMessage == null)
        {
            titleMessage = "New Task";
        }

        title.classList.add('issue-title')
        title.setAttribute('contenteditable', 'true');
        title.innerHTML = titleMessage;

        let duration = document.createElement('p')
        duration.classList.add('issue-duration')
        duration.setAttribute('contenteditable', 'true');
        duration.innerHTML = "Duration: " + durationMessage;

        console.log(assignieMessage);

        if (assignieMessage == 'undefined' || assignieMessage == "" || assignieMessage == null) {
             assignieMessage = "UnAsigned";
        }

        let assignedToId = "assignedTo" + id;

        let assignedTo = document.createElement('p');
        assignedTo.classList.add('issue-duration');
        assignedTo.setAttribute("id", assignedToId);
        assignedTo.setAttribute('contenteditable', 'true');
        assignedTo.setAttribute('onclick', 'assignedToClick( " ' + assignedToId + ' " )');
        assignedTo.innerHTML = "Assigned To: " + assignieMessage;

        @*if (projectMessage == 'undefined' || projectMessage == "" || projectMessage == null) {
            projectMessage = "Choose Project";
        }

        let projId = "projectId" + id;

        let project = document.createElement('p')
        project.classList.add('issue-duration')
        project.setAttribute("id", projId);
        project.setAttribute('contenteditable', 'true');
        project.setAttribute('onclick', 'projClick( " ' + projId + ' " )');
        project.innerHTML = "Project: " + projectMessage;*@

        if (asigneeMessage == 'undefined' || asigneeMessage == "" || asigneeMessage == null) {
            asigneeMessage = "UnAsigned";
        }

        let assignee = document.createElement('p')
        assignee.classList.add('issue-description')
        assignee.setAttribute('contenteditable', 'true');
        assignee.innerHTML = "Assignee: " + asigneeMessage;

        newIssue.appendChild(title);
        newIssue.appendChild(duration);
        newIssue.appendChild(assignedTo);
        //newIssue.appendChild(project);
        newIssue.appendChild(assignee);

        newIssue.addEventListener("dblclick", function () {
            issueDoubleClick(newIssue.id);

            var request = new XMLHttpRequest();

            request.open('POST', '/Issues/CreateNewTask', true);
            request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
            request.setRequestHeader('Content-Length', JSON.stringify(o).length);
            request.onreadystatechange = function () {
                if (request.readyState == 4 && request.status == 200) {
                    //console.log(request.responseText)
                }
            }
            request.send();
        });

        return newIssue;
    }

    var model = JSON.parse('@Html.Raw(Json.Serialize(Model))');
    for (var i = 0; i < model.length; i++) {
        console.log(model[i]);
        let open = document.getElementById("open");
        let inProgress = document.getElementById("in-progress");
        let resolved = document.getElementById("resolved");
        let closed = document.getElementById("closed");
        if (model[i].state == "New") {

            let issue = createIssue(model[i].id, model[i].title, model[i].assignee, model[i].duration, model[i].assignedTo, model[i].project);
            open.appendChild(issue);
        }
        else if (model[i].state == "In Progress") {
            let issue = createIssue(model[i].id, model[i].title, model[i].assignee, model[i].duration, model[i].assignedTo, model[i].project);
            inProgress.appendChild(issue);
        }
        else if (model[i].state == "Active") {
            let issue = createIssue(model[i].id, model[i].title, model[i].assignee, model[i].duration, model[i].assignedTo, model[i].project);
            resolved.appendChild(issue);
        }
        else if (model[i].state == "Closed") {
            let issue = createIssue(model[i].id, model[i].title, model[i].assignee, "0", model[i].assignedTo, model[i].project);
            closed.appendChild(issue);
        }
    }
</script>