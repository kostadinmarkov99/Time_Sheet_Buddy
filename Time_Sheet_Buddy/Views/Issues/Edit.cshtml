@using Microsoft.AspNetCore.Mvc.Rendering;
@using Time_Sheet_Buddy.Models;
@using Time_Sheet_Buddy.Entities

@model Time_Sheet_Buddy.Entities.Issue

@{
    ViewBag.Title = "Edit";
}

@{
    bool isAdmin = User.IsInRole("Admin");
}

@{
    var users = ViewData["Users"] as List<ApplicationUser>;
}


<h2>Edit</h2>

@using (Html.BeginForm())
{


<div class="form-horizontal">

    <h4>IssueTracker</h4>
    <hr />
    @Html.HiddenFor(model => model.Id)

    @if (User.IsInRole("Administrator"))
    {
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.DropDownListFor(m => m.AssignedTo, (SelectList)ViewBag.Users, "Seleccionar", new { @class = "form-control" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <span class="closeProj">&times;</span>
            <select id="selectProj">
                @foreach (var state in (IEnumerable<Stete>)ViewData["States"])
                {
                    <option>@state.Title</option>
                }
            </select>
        </div>

        <div class="form-group">
            <button id="savedChanges" onclick="savedChanges()">Save</button>
        </div>
    }
    else
    {
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })

                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <span class="close">&times;</span>
            <select id="selectAssignedTo">
                @foreach (var user in users)
                {
                    <option>@user.UserName</option>
                }
            </select>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AssignedTo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AssignedTo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AssignedTo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <span class="closeProj">&times;</span>
            <select id="selectProj">
                @foreach (var state in (IEnumerable<Stete>)ViewData["States"])
                {
                    <option>@state.Title</option>
                }
            </select>
        </div>

    }
</div>

    <button id="savedChangesBtn" onclick="addChange()">Save</button>


    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
    <script>
    function addChange() {    
        var request = new XMLHttpRequest();
        //debugger;

        //console.log(docuent.getElementById("Title"));

        var o = new Object();
        o.id = @Model.Id;
        o.Title = "123";
        o.Description = "asdasd";
        o.Duration =1.5;
        o.AssignedTo = "sss";
        o.State = "New";

        //console.log(o.issue_id);
        //console.log(o.newState);
        //console.log(JSON.stringify(o));

        request.open('POST', '/Issues/EditChange', true);
        request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
        request.setRequestHeader('Content-Length', JSON.stringify(o).length);
        request.onreadystatechange = function () {
            if (request.readyState == 4 && request.status == 200) {
                //console.log(request.responseText)
            }
        }
        request.send(JSON.stringify(o));
    }

    @*var btn = document.getElementById("savedChangesBtn");

    btn.addEventListener('click', e => {
        //let newIssue = createIssue("Issue Title", "Issue Description")
        //createButton.insertAdjacentElement("afterend", newIssue);
        console.log("YES");
    })
*@
    //btn.addEventListener('click', () => {
        @**@
    //})

    </script>
}

