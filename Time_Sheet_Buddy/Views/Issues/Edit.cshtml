@using Microsoft.AspNetCore.Mvc.Rendering;
@using Time_Sheet_Buddy.Models;
@using Time_Sheet_Buddy.Entities

@model Time_Sheet_Buddy.Entities.Issue

@section IssueEditStyles{
    <link rel="stylesheet" href="~/css/IssueEditStyle.css" />
}

@{
    ViewBag.Title = "Edit";

    var themaToShow = ViewData["ThemaToShow"] as byte[];
}

@{
    bool isAdmin = User.IsInRole("Admin");
}

@{
    var users = ViewData["Users"] as List<ApplicationUser>;
}

<!DOCTYPE html>
<html style="background-image:url(data:image/gif;base64,@(Convert.ToBase64String(themaToShow))">
<head>
</head>
<body style="background-image:url(data:image/gif;base64,@(Convert.ToBase64String(themaToShow))">
    @using (Html.BeginForm())
    {
        <div class="form-horizontal">
            @Html.HiddenFor(model => model.Id)

            <div class="form-container">
                <div class="form-content">
                    <h2>Edit</h2>
                    <h4>Issue @Model.Title</h4>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })

                            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label id="assignedToLbl">Assigned To: </label>
                        <select id="selectAssignedTo">
                            @foreach (var user in users)
                            {
                                <option>@user.UserName</option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label id="stateLbl">State: </label>
                        <select id="selectProj">
                            @foreach (var state in (IEnumerable<Stete>)ViewData["States"])
                            {
                                <option>@state.Title</option>
                            }
                        </select>
                    </div>

                    <div class="form-group" style="visibility: hidden; content-visibility: hidden;">
                        @Html.LabelFor(model => model.Project, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Project, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.Project, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <button id="savedChangesBtn" onclick="addChange()">Save</button>


                    <div>
                        @Html.ActionLink("Back to List", "ProjectBacklog", "Backlogs", new { proj = Model.Project }, null)
                    </div>
                </div>
            </div>

        </div>
        <script>
    function addChange() {
        var request = new XMLHttpRequest();

        var titleValue = document.getElementById("Title").value + "";
        var descriptionValue = document.getElementById("Description").value + "";
        var durationValue = document.getElementById("Duration").value;
        var selectAssignedTo = document.getElementById('selectAssignedTo');
        var assignedToValue = selectAssignedTo.options[selectAssignedTo.selectedIndex].value + "";
        var selectState = document.getElementById("selectProj");
        var stateValue = selectState.options[selectState.selectedIndex].value + "";
        //debugger;

        //console.log(docuent.getElementById("Title"));

        var o = new Object();
        o.Id = @Model.Id;
        o.Title = titleValue;
        o.Description = descriptionValue;
        o.Duration = durationValue;
        o.AssignedTo = assignedToValue;
        o.State = stateValue;
        //o.Project = project;

        //console.log(o.issue_id);
        //console.log(o.newState);
        //console.log(JSON.stringify(o));

        request.open('POST', '/Issues/EditChange', true);
        request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
        request.setRequestHeader('Content-Length', JSON.stringify(o).length);
        request.onreadystatechange = function () {
            if (request.readyState == 4 && request.status == 200) {
                window.location.href = "/Issues/Details?id=" + @Model.Id;
            } else {
                window.location.href = "/Issues/Details?id=" + @Model.Id;
            }
        }
        request.send(JSON.stringify(o));

        //window.location.href = "/Issues/Details?id=" + @Model.Id;
    }

    @*var btn = document.getElementById("savedChangesBtn");

    btn.addEventListener('click', e => {
        //let newIssue = createIssue("Issue Title", "Issue Description")
        //createButton.insertAdjacentElement("afterend", newIssue);
        console.log("YES");
    })
*@
    //btn.addEventListener('click', () => {
        @**@
    //})

        </script>
    }

</body>
</html>