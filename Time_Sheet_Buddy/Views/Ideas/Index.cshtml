@model IEnumerable<Time_Sheet_Buddy.Entities.Ideas>

@section IdeaIndexStyles{ 
    <link rel="stylesheet" href="~/css/IdeasIndexStyle.css" />
}

@{
    ViewData["Title"] = "Index";

    var themaToShow = ViewData["ThemaToShow"] as byte[];
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta content="text/html;charset=utf-8" http-equiv="Content-Type">
    <meta content="utf-8" http-equiv="encoding">
</head>
<body style="background-image:url(data:image/gif;base64,@(Convert.ToBase64String(themaToShow))">
    <div id="stickies-container"></div>
    <div class="sticky-form">
        <label for="stickytitle">Title for your sticky:</label>
        <input type="text" name="stickytitle" id="stickytitle" />
        <label for="stickytext">Write something down:</label>
        <textarea name="stickytext"
                  id="stickytext"
                  cols="24"
                  rows="10"></textarea>
        <button class="button" id="createsticky">Stick it!</button>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            var model = JSON.parse('@Html.Raw(Json.Serialize(Model))');

            const stickyArea = document.querySelector(
                '#stickies-container'
            );

            const createStickyButton = document.querySelector(
                '#createsticky'
            );

            var stickyTitleInput = document.querySelector('#stickytitle');
            var stickyTextInput = document.querySelector('#stickytext');

            console.log(model.length);

            for (var i = 0; i < model.length; i++) {
                stickyTitleInput = model[i].title;
                stickyTextInput = model[i].description;

                var stickyId = model[i].id;
                var leftPosition = model[i].leftStyle;
                var topStyle = model[i].topStyle;

                createSavedSticky(stickyId, stickyTitleInput, stickyTextInput, leftPosition, topStyle);
            }

            var deleteSticky = e => {
                e.target.parentNode.remove();
            };

            let isDragging = false;
            let dragTarget;

            let lastOffsetX = 0;
            let lastOffsetY = 0;

            function drag(e) {
                if (!isDragging) return;

                // console.log(lastOffsetX);

                dragTarget.style.left = e.clientX - lastOffsetX + 'px';
                dragTarget.style.top = e.clientY - lastOffsetY + 'px';

                var request = new XMLHttpRequest();
                //debugger;
                var o = new Object();
                o.sticky_id = dragTarget.id;
                o.left_style = dragTarget.style.left;
                o.top_style = dragTarget.style.top;

                //console.log(dragTarget.style.left);
                //console.log(dragTarget.style.top);

                request.open('POST', '/Ideas/SaveStickyCoordinates', true);
                request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
                request.setRequestHeader('Content-Length', JSON.stringify(o).length);
                request.onreadystatechange = function () {
                    if (request.readyState == 4 && request.status == 200) {
                    }
                }
                request.send(JSON.stringify(o));
            }

            function createSavedSticky(id, title, input, leftPosition, topStyle) {
                var newSticky = document.createElement('div');
                newSticky.setAttribute("id", id);

                //console.log(newSticky.id);
                newSticky.setAttribute('ondbclick', 'stickyDoubleClick( " ' + id + ' " )');

                var html = `<h3>${title.replace(
                    /<\/?[^>]+(>|$)/g,
                    ''
                )}</h3><p>${input
                    .replace(/<\/?[^>]+(>|$)/g, '')
                    .replace(
                        /\r\n|\r|\n/g,
                        '<br />'
                    )}</p><span class="deletesticky">&times;</span>`;
                newSticky.classList.add('drag', 'sticky');
                newSticky.innerHTML = html;

                var newInput = document.createElement('button');
                newInput.setAttribute("id", id);
                newInput.setAttribute('class', 'btn');
                newInput.value = 'Edit';
                newInput.textContent = 'Edit';

                newSticky.appendChild(newInput);

                newInput.onclick = function () {
                    var elInt = parseInt(newInput.id);
                    console.log(elInt);

                    window.location = "@(Url.Action("Details", "Ideas"))" + "?Id=" + elInt;
                };

                // newSticky.style.backgroundColor = randomColor();
                stickyArea.append(newSticky);

                positionSavedSticky(newSticky, leftPosition, topStyle);

                applyDeleteListener();
            }

            function stickyDoubleClick(id) {
                var elInt = parseInt(id);
                console.log(elInt);

                window.location = "@(Url.Action("Details", "Ideas"))" + "?Id=" + elInt;
            }

            function createSticky() {
                var stickyTitleInput = document.querySelector('#stickytitle');
                var stickyTextInput = document.querySelector('#stickytext');

                if (stickyTitleInput == "" || stickyTitleInput === "" || stickyTitleInput == undefined || stickyTitleInput == null) {
                    console.log("Yes");
                    alert("Add");
                }

                var newSticky = document.createElement('div');

                //console.log(newSticky.id);

                //newSticky.ondblclick();

                var html = `<h3>${stickyTitleInput.value.replace(
                    /<\/?[^>]+(>|$)/g,
                    ''
                )}</h3><p>${stickyTextInput.value
                    .replace(/<\/?[^>]+(>|$)/g, '')
                    .replace(
                        /\r\n|\r|\n/g,
                        '<br />'
                    )}</p><span class="deletesticky">&times;</span>`;
                newSticky.classList.add('drag', 'sticky');
                newSticky.innerHTML = html;
                // newSticky.style.backgroundColor = randomColor();

                stickyArea.append(newSticky);
                positionSticky(newSticky);
                applyDeleteListener();

                var leftSyle = newSticky.style.left;
                var topStyle = newSticky.style.top;

                //console.log(leftSyle);
                //console.log(topStyle);

                var request = new XMLHttpRequest();
                //debugger;
                var o = new Object();
                o.sticky_title = document.querySelector('#stickytitle').value;
                o.sticky_description = document.querySelector('#stickytext').value;
                o.left_style = leftSyle;
                o.top_style = topStyle;

                //console.log(o.sticky_title);
                //console.log(o.sticky_description);

                request.open('POST', '/Ideas/SaveSticky', true);
                request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
                request.setRequestHeader('Content-Length', JSON.stringify(o).length);
                request.onreadystatechange = function () {
                    if (request.readyState == 4 && request.status == 200) {
                        clearStickyForm();
                    }
                }
                request.send(JSON.stringify(o));

                clearStickyForm();
            }
            function clearStickyForm() {
                stickyTitleInput.value = '';
                stickyTextInput.value = '';
            }
            function positionSavedSticky(sticky, leftStyle, topStyle) {
                sticky.style.left = leftStyle + 'px';
                sticky.style.top = topStyle + 'px';
            }
            function positionSticky(sticky) {
                sticky.style.left =
                    window.innerWidth / 2 -
                    sticky.clientWidth / 2 +
                    (-100 + Math.round(Math.random() * 50)) +
                    'px';
                sticky.style.top =
                    window.innerHeight / 2 -
                    sticky.clientHeight / 2 +
                    (-100 + Math.round(Math.random() * 50)) +
                    'px';
            }

            function editSticky() { }

            function stripHtml(text) {
                return text.replace(/<\/?[^>]+(>|$)/g, '');
            }

            function randomColor() {
                const r = 200 + Math.floor(Math.random() * 56);
                const g = 200 + Math.floor(Math.random() * 56);
                const b = 200 + Math.floor(Math.random() * 56);
                return 'rgb(' + r + ',' + g + ',' + b + ')';
            }

            function applyDeleteListener() {
                var deleteSticky = e => {

                    var stickyId = e.target.parentNode.id;

                    console.log(stickyId);

                    e.target.parentNode.remove();

                    var request = new XMLHttpRequest();
                    //debugger;
                    var o = new Object();
                    o.sticky_id = stickyId;
                    o.left_style = "";
                    o.top_style = "";

                    request.open('POST', '/Ideas/DeleteSticky', true);
                    request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
                    request.setRequestHeader('Content-Length', JSON.stringify(o).length);
                    request.onreadystatechange = function () {
                        if (request.readyState == 4 && request.status == 200) {
                        }
                    }
                    request.send(JSON.stringify(o));
                };
                let deleteStickyButtons = document.querySelectorAll(
                    '.deletesticky'
                );

                deleteStickyButtons.forEach(dsb => {
                    dsb.removeEventListener('click', deleteSticky, false);
                    dsb.addEventListener('click', deleteSticky);
                });
            }

            window.addEventListener('mousedown', e => {
                if (!e.target.classList.contains('drag')) {
                    return;
                }
                dragTarget = e.target;
                dragTarget.parentNode.append(dragTarget);
                lastOffsetX = e.offsetX;
                lastOffsetY = e.offsetY;
                // console.log(lastOffsetX, lastOffsetY);
                isDragging = true;
            });
            window.addEventListener('mousemove', drag);
            window.addEventListener('mouseup', () => (isDragging = false));

            createStickyButton.addEventListener('click', createSticky);
            applyDeleteListener();
        });
    </script>
</body>
</html>